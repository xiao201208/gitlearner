git commond
git init：初始化
git config --global user.name "Your Name"
git config --global user.email "email@email.com"
git add filename 添加文件到缓存区
git commit -m "notes" 把文件从缓存区提交	
git status 查看状态
git diff filename 查看文件改动
git log --pretty=oneline 单行形式查看提交日志
git reset --hard HEAD^ 退回到上一个版本（--hard HEAD^^^ 上三个版本；--hard HEAD~100 上一百个版本）
git reflog 操作日志
git checkout -- filename 丢弃掉工作区的更改（其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。）
git reset HEAD filename 撤销添加到缓存区的操作
git rm filename 删除文件

撤销修改小结:
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考git reset --hard HEAD^命令，不过前提是没有推送到远程库。

git remote add origin git@github.com:xiao201208/gitlearner.git
#$ git remote add origin https://github.com/xiao201208/gitlearner.git
将本地的库关联到github上，git@github.com:xiao201208/gitlearner.git方式使用的是ssh协议，https://github.com……使用的是https协议。https协议速度慢些，可能需要输入口令。
其中远程库的名字就是origin

git push -u origin master
把本地库推送到远程库中，实际上是把当前分支master推送到远程。由于远程库是空的，第一次推送master分支时，加上-u的参数，这样Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令：
git push origin master

git clone git@github.com:xiao201208/gitlearner.git
把远程库克隆到本地库中。

git的ssh链接：
ssh-keygen -t rsa -b 4096 -C "email@email.com" 创建密钥对
eval $(ssh-agent -s) 查看agent进程是否运行中，若没有 ssh-keygen -p 开启，自动开启参考：https://help.github.com/articles/working-with-ssh-key-passphrases/

ssh-add ~/.ssh/id_rsa 将私钥添加到agent中
clip < ~/.ssh/id_rsa.pub 将公钥复制到剪切板

git分支：
git checkout -b dev 创建dev分支，然后切换到dev分支,相当于执行了：
git branch dev
git checkout dev
git branch 查看当前分支
git merge dev 把dev分支合并到master上
git branch -d dev 删除dev分支


git log --graph --pretty=oneline --abbrev-commit 用git log --graph命令可以看到分支合并图
查看分支合并的情况
git merge --no-ff -m "merge with no-ff" dev
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

git stash 存储当前现场
git stash list 查看存储的现场
git stash apply 恢复现场
git stash drop 删除存储的现场
git stash pop 恢复并删除存储的现场

git branch -D <name> 丢弃一个没有被合并过的分支


git remote -v 查看远程库的信息
一般推送的分支有：
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。